# WeatherApp 커서 규칙

## 프로젝트 개요
안드로이드 날씨 앱 프로젝트입니다. MVVM 아키텍처, Hilt 의존성 주입, Room 데이터베이스를 사용합니다.

## 코딩 스타일
- 언어: Kotlin
- 들여쓰기: 4칸 스페이스
- 파일명: PascalCase (예: LocationManager.kt)
- 클래스명: PascalCase (예: FavoriteLocation)
- 변수/함수명: camelCase (예: getCurrentLocation)
- 상수: UPPER_SNAKE_CASE (예: KAKAO_BASE_URL)

## 아키텍처 패턴
- MVVM (Model-View-ViewModel)
- Clean Architecture (Data, Domain, Presentation Layer)
- Repository Pattern
- Dependency Injection (Hilt)

## 패키지 구조
```
com.example.kh_studyprojects_weatherapp/
├── data/
│   ├── api/           # API 서비스 (Retrofit)
│   ├── model/         # DTO 클래스들
│   ├── repository/    # Repository 구현체
│   └── database/      # Room 데이터베이스
├── domain/
│   ├── model/         # 도메인 모델
│   ├── repository/    # Repository 인터페이스
│   └── usecase/       # Use Case 클래스들
└── presentation/
    ├── weather/       # 날씨 관련 UI
    ├── finedust/      # 미세먼지 관련 UI
    ├── setting/       # 설정 관련 UI
    └── location/      # 위치 관련 로직
```

## 네이밍 규칙
- API 서비스: `*ApiService` (예: KakaoApiService)
- DTO 클래스: `*Dto` (예: WeatherDailyDto)
- Repository: `*Repository` (예: WeatherRepository)
- ViewModel: `*ViewModel` (예: CurrentWeatherViewModel)
- Fragment: `*Fragment` (예: WeatherFragment)
- Adapter: `*Adapter` (예: FavoriteLocationAdapter)

## 주석 규칙
- 클래스/함수: KDoc 형식 사용
- 필수 태그: @author, @since, @version
- 개정이력: 수정일, 수정자, 수정내용 포함
- 필드 주석: /** */ 형식 사용

## API 관련
- 자체 백엔드: BackendRetrofitInstance 사용
- 외부 API: ExternalApiRetrofitInstance 사용
- 카카오 로컬 API: 위도/경도 → 주소 변환
- API 키: 보안을 위해 별도 관리

## 데이터베이스 규칙
- Room 사용
- Entity: `*Entity` 접미사 (예: FavoriteLocationEntity)
- DAO: `*Dao` 접미사 (예: FavoriteLocationDao)
- 컬럼명: snake_case (예: created_at)

## 의존성 주입
- Hilt 사용
- @Inject, @Singleton, @Provides 어노테이션 활용
- 불필요한 모듈은 제거

## 에러 처리
- Result<T> 타입 사용
- try-catch 블록으로 예외 처리
- 로그 메시지 상세히 기록

## 테스트
- 단위 테스트: JUnit 사용
- UI 테스트: Espresso 사용
- 테스트 파일명: `*Test.kt`

## Git 커밋 메시지
- 형식: `feat: 기능 추가`, `fix: 버그 수정`, `refactor: 리팩토링`
- 한국어 사용
- 구체적인 변경사항 명시

## 성능 고려사항
- RecyclerView 사용 시 ViewHolder 패턴
- 이미지 로딩: Glide 또는 Coil 사용
- 네트워크 요청: Retrofit + OkHttp
- 비동기 처리: Coroutines 사용

## 보안
- API 키는 코드에 하드코딩 금지
- 민감한 정보는 local.properties에 저장
- ProGuard/R8 난독화 적용

## 접근성
- contentDescription 속성 추가
- 적절한 색상 대비 유지
- 터치 영역 최소 48dp 유지

## 자산/리소스 명명 규칙

앱에서 사용되는 이미지, 아이콘, 도형 등의 자산(Asset) 및 리소스 파일은 다음 명명 규칙을 따릅니다.

**패턴:** `[타입 약어]_[카테고리 약어]_[목적/디자인]_[추가 정보/버전]`

### 타입 약어
- `sh`: Shape (도형)
- `ic`: Icon (아이콘)

### 카테고리 약어
- `nav`: Navigation (내비게이션 관련)
- `com`: Common (공통으로 사용되는)

### 목적/디자인
자산의 기능이나 시각적 특징을 설명하는 명사 또는 형용사 조합
- `round_t_lr`: 상단 왼쪽/오른쪽 라운딩
- `weatherimg_effect`: 날씨 이미지 효과
- `btn_radius`: 버튼 라운딩
- `sunny`: 맑음
- `cloudy`: 흐림

### 추가 정보/버전
필요한 경우 숫자를 사용하여 버전이나 특정 변형을 구분
- `01`, `02` 등

### 예시
- `sh_nav_round_t_lr_01`: 내비게이션 바 상단 왼쪽/오른쪽 라운딩 도형 (버전 01)
- `ic_com_weatherimg_sunny`: 공통으로 사용되는 맑은 날씨 아이콘
- `sh_com_btn_radius_02`: 공통 버튼의 라운딩 도형 (버전 02)
